# syntax=docker/dockerfile:1.3.0-labs
# "syntax=docker/dockerfile:1.3.0-labs" is necessary for creating the pip cache

# Instruction for Dockerfile to create a new image on top of the base image of nvidia/cuda
# pytorch and tensorflow are installed in different conda envs, i.e., base and tf. This is because Pytorch doesn't have a proper version for cuda 11.2

# change BASE accordingly. From https://hub.docker.com/r/nvidia/cuda
ARG BASE=nvidia/cuda:11.2.2-cudnn8-devel-ubuntu20.04
FROM $BASE

# change BASE accordingly
ARG USER=sjtu
ARG PASSWORD=sjtu123456
ARG UID=1000
ARG GID=1000

# Setup timezone
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# necessary update
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC && \
    apt-get update && apt-get install -y --no-install-recommends \
    wget ca-certificates git openssh-server sudo vim curl libpam-cracklib tzdata dumb-init && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

#-------- add a new user --------
RUN addgroup --gid ${GID} ${USER} && \
    adduser --uid ${UID} --gid ${GID} --gecos "" --disabled-password ${USER} && \
    usermod -G root,sudo ${USER} && \
    echo "${USER}:${PASSWORD}" | chpasswd
#RUN sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
#RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

# switch user
ENV PATH "/home/$USER/.local/bin:$PATH"
USER ${USER}
WORKDIR /home/${USER}
ENV PATH=/home/${USER}/.conda/bin:$PATH \
    HOME=/home/${USER}

# for ssh connection
RUN mkdir -p /home/${USER}/.local/my_sshd && \
    ssh-keygen -f /home/${USER}/.local/my_sshd/ssh_host_rsa_key -N '' -t rsa && \
    ssh-keygen -f /home/${USER}/.local/my_sshd/ssh_host_dsa_key -N '' -t dsa && \
    echo "Port 22" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "HostKey /home/${USER}/.local/my_sshd/ssh_host_rsa_key" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "HostKey /home/${USER}/.local/my_sshd/ssh_host_dsa_key" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "AuthorizedKeysFile  .ssh/authorized_keys" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "ChallengeResponseAuthentication no" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "UsePAM yes" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "Subsystem   sftp    /usr/lib/sftp-server" >> /home/${USER}/.local/my_sshd/sshd_config && \
    echo "PidFile /home/${USER}/.local/my_sshd/sshd.pi" >> /home/${USER}/.local/my_sshd/sshd_config

# Install miniconda (python)
# See https://docs.conda.io/projects/miniconda/en/latest/miniconda-other-installer-links.html
RUN curl -o ~/miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-py39_23.5.2-0-Linux-x86_64.sh && \
    chmod +x ~/miniconda.sh && \
    /bin/bash ./miniconda.sh -b -p /home/${USER}/.conda && \
    rm ~/miniconda.sh && \
    conda config --system --prepend channels conda-forge && \
    conda config --system --set auto_update_conda false && \
    conda config --system --set show_channel_urls true && \
    pip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple && \
    pip install --upgrade pip

# install ipykernel, jupyter, and pytorch
RUN --mount=type=cache,mode=0777,target=/home/${USER}/.cache,uid=${UID},gid=${GID} \
    pip install ipykernel && \
    pip install notebook==6.3.0 jupyterlab==3.6.3 && \
    pip install torch==1.12.1+cu116 torchvision==0.13.1+cu116 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu116 && \
    sed -i 's/Python 3 (ipykernel)/base (pytorch-1.12.1)/g' /home/${USER}/.conda/share/jupyter/kernels/python3/kernel.json && \
    pip install transformers==4.33.2 scipy==1.10.1 SentencePiece==0.1.99 accelerate==0.23.0 && \
    git clone https://github.com/timdettmers/bitsandbytes.git && \
    cd bitsandbytes && \
    CUDA_VERSION=116 make cuda11x && \
    python setup.py install && \
    rm -r ../bitsandbytes

# install tensorflow
RUN conda create -n tf python=3.9 && \
    conda clean -ya

SHELL ["/bin/bash", "-c"]
RUN --mount=type=cache,mode=0777,target=/home/${USER}/.cache,uid=${UID},gid=${GID} \
    source activate tf && \
    pip install ipykernel && \
    python -m ipykernel install --user --name tf --display-name "tensorflow-2.7.0" && \
    pip install protobuf==3.20.3 tensorflow==2.7.0 # protobuf 4.* may cause dependency

# set plugins and kernels for jupyter
RUN --mount=type=cache,mode=0777,target=/home/${USER}/.cache,uid=${UID},gid=${GID} \
    source activate base && \
    pip install jupyter_contrib_nbextensions==0.7.0 jupyter_nbextensions_configurator==0.6.1 matplotlib==3.7.1 jupyter_http_over_ws==0.0.8 nbconvert==7.3.1 traitlets==5.9.0 && \
    jupyter notebook --generate-config && \
    jupyter contrib nbextension install --user && \
    jupyter serverextension enable --py jupyter_http_over_ws

RUN tmp="$(python3 -c "from notebook.auth import passwd; print(passwd('$PASSWORD'))")" && \
    echo "c.NotebookApp.password='$tmp'">>/home/${USER}/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.open_browser=False">>/home/${USER}/.jupyter/jupyter_notebook_config.py && \
    echo "c.NotebookApp.terminado_settings = {'shell_command': ['/bin/bash']}">>/home/${USER}/.jupyter/jupyter_notebook_config.py && \
    conda init

# RUN curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone  # if you need code server

EXPOSE 22 8888 1000 1001 1002

COPY ./entrypoint.sh ${HOME}/entrypoint.sh
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

CMD bash ${HOME}/entrypoint.sh